/*
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GifsGetByIdResponse;
import com.konfigthis.client.model.GifsGetByIdsResponse;
import com.konfigthis.client.model.GifsGetRandomGifResponse;
import com.konfigthis.client.model.GifsGetTrendingGifsResponse;
import com.konfigthis.client.model.GifsSearchGifsResponse;
import com.konfigthis.client.model.GifsTranslatePhraseGifResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GifsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GifsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GifsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api_key\" is required but no API key was provided. Please set \"api_key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(Integer gifId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs/{gifId}"
            .replace("{" + "gifId" + "}", localVarApiClient.escapeString(gifId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer gifId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gifId' is set
        if (gifId == null) {
            throw new ApiException("Missing the required parameter 'gifId' when calling getById(Async)");
        }

        return getByIdCall(gifId, _callback);

    }


    private ApiResponse<GifsGetByIdResponse> getByIdWithHttpInfo(Integer gifId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(gifId, null);
        Type localVarReturnType = new TypeToken<GifsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer gifId, final ApiCallback<GifsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(gifId, _callback);
        Type localVarReturnType = new TypeToken<GifsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer gifId;

        private GetByIdRequestBuilder(Integer gifId) {
            this.gifId = gifId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(gifId, _callback);
        }


        /**
         * Execute getById request
         * @return GifsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsGetByIdResponse execute() throws ApiException {
            ApiResponse<GifsGetByIdResponse> localVarResp = getByIdWithHttpInfo(gifId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;GifsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(gifId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(gifId, _callback);
        }
    }

    /**
     * Get GIF by Id
     * Returns a GIF given that GIF&#39;s unique ID 
     * @param gifId Filters results by specified GIF ID. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer gifId) throws IllegalArgumentException {
        if (gifId == null) throw new IllegalArgumentException("\"gifId\" is required but got null");
        return new GetByIdRequestBuilder(gifId);
    }
    private okhttp3.Call getByIdsCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        return getByIdsCall(ids, _callback);

    }


    private ApiResponse<GifsGetByIdsResponse> getByIdsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = getByIdsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<GifsGetByIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdsAsync(String ids, final ApiCallback<GifsGetByIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<GifsGetByIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdsRequestBuilder {
        private String ids;

        private GetByIdsRequestBuilder() {
        }

        /**
         * Set ids
         * @param ids Filters results by specified GIF IDs, separated by commas. (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for getByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdsCall(ids, _callback);
        }


        /**
         * Execute getByIds request
         * @return GifsGetByIdsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsGetByIdsResponse execute() throws ApiException {
            ApiResponse<GifsGetByIdsResponse> localVarResp = getByIdsWithHttpInfo(ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIds request with HTTP info returned
         * @return ApiResponse&lt;GifsGetByIdsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsGetByIdsResponse> executeWithHttpInfo() throws ApiException {
            return getByIdsWithHttpInfo(ids);
        }

        /**
         * Execute getByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsGetByIdsResponse> _callback) throws ApiException {
            return getByIdsAsync(ids, _callback);
        }
    }

    /**
     * Get GIFs by ID
     * A multiget version of the get GIF by ID endpoint. 
     * @return GetByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdsRequestBuilder getByIds() throws IllegalArgumentException {
        return new GetByIdsRequestBuilder();
    }
    private okhttp3.Call getRandomGifCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomGifValidateBeforeCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        return getRandomGifCall(tag, rating, _callback);

    }


    private ApiResponse<GifsGetRandomGifResponse> getRandomGifWithHttpInfo(String tag, String rating) throws ApiException {
        okhttp3.Call localVarCall = getRandomGifValidateBeforeCall(tag, rating, null);
        Type localVarReturnType = new TypeToken<GifsGetRandomGifResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRandomGifAsync(String tag, String rating, final ApiCallback<GifsGetRandomGifResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomGifValidateBeforeCall(tag, rating, _callback);
        Type localVarReturnType = new TypeToken<GifsGetRandomGifResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRandomGifRequestBuilder {
        private String tag;
        private String rating;

        private GetRandomGifRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filters results by specified tag. (optional)
         * @return GetRandomGifRequestBuilder
         */
        public GetRandomGifRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return GetRandomGifRequestBuilder
         */
        public GetRandomGifRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Build call for getRandomGif
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRandomGifCall(tag, rating, _callback);
        }


        /**
         * Execute getRandomGif request
         * @return GifsGetRandomGifResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsGetRandomGifResponse execute() throws ApiException {
            ApiResponse<GifsGetRandomGifResponse> localVarResp = getRandomGifWithHttpInfo(tag, rating);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRandomGif request with HTTP info returned
         * @return ApiResponse&lt;GifsGetRandomGifResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsGetRandomGifResponse> executeWithHttpInfo() throws ApiException {
            return getRandomGifWithHttpInfo(tag, rating);
        }

        /**
         * Execute getRandomGif request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsGetRandomGifResponse> _callback) throws ApiException {
            return getRandomGifAsync(tag, rating, _callback);
        }
    }

    /**
     * Random GIF
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @return GetRandomGifRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetRandomGifRequestBuilder getRandomGif() throws IllegalArgumentException {
        return new GetRandomGifRequestBuilder();
    }
    private okhttp3.Call getTrendingGifsCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs/trending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrendingGifsValidateBeforeCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        return getTrendingGifsCall(limit, offset, rating, _callback);

    }


    private ApiResponse<GifsGetTrendingGifsResponse> getTrendingGifsWithHttpInfo(Integer limit, Integer offset, String rating) throws ApiException {
        okhttp3.Call localVarCall = getTrendingGifsValidateBeforeCall(limit, offset, rating, null);
        Type localVarReturnType = new TypeToken<GifsGetTrendingGifsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrendingGifsAsync(Integer limit, Integer offset, String rating, final ApiCallback<GifsGetTrendingGifsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrendingGifsValidateBeforeCall(limit, offset, rating, _callback);
        Type localVarReturnType = new TypeToken<GifsGetTrendingGifsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrendingGifsRequestBuilder {
        private Integer limit;
        private Integer offset;
        private String rating;

        private GetTrendingGifsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 25)
         * @return GetTrendingGifsRequestBuilder
         */
        public GetTrendingGifsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An optional results offset. (optional, default to 0)
         * @return GetTrendingGifsRequestBuilder
         */
        public GetTrendingGifsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return GetTrendingGifsRequestBuilder
         */
        public GetTrendingGifsRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Build call for getTrendingGifs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrendingGifsCall(limit, offset, rating, _callback);
        }


        /**
         * Execute getTrendingGifs request
         * @return GifsGetTrendingGifsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsGetTrendingGifsResponse execute() throws ApiException {
            ApiResponse<GifsGetTrendingGifsResponse> localVarResp = getTrendingGifsWithHttpInfo(limit, offset, rating);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrendingGifs request with HTTP info returned
         * @return ApiResponse&lt;GifsGetTrendingGifsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsGetTrendingGifsResponse> executeWithHttpInfo() throws ApiException {
            return getTrendingGifsWithHttpInfo(limit, offset, rating);
        }

        /**
         * Execute getTrendingGifs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsGetTrendingGifsResponse> _callback) throws ApiException {
            return getTrendingGifsAsync(limit, offset, rating, _callback);
        }
    }

    /**
     * Trending GIFs
     * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
     * @return GetTrendingGifsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTrendingGifsRequestBuilder getTrendingGifs() throws IllegalArgumentException {
        return new GetTrendingGifsRequestBuilder();
    }
    private okhttp3.Call searchGifsCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGifsValidateBeforeCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchGifs(Async)");
        }

        return searchGifsCall(q, limit, offset, rating, lang, _callback);

    }


    private ApiResponse<GifsSearchGifsResponse> searchGifsWithHttpInfo(String q, Integer limit, Integer offset, String rating, String lang) throws ApiException {
        okhttp3.Call localVarCall = searchGifsValidateBeforeCall(q, limit, offset, rating, lang, null);
        Type localVarReturnType = new TypeToken<GifsSearchGifsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchGifsAsync(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback<GifsSearchGifsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGifsValidateBeforeCall(q, limit, offset, rating, lang, _callback);
        Type localVarReturnType = new TypeToken<GifsSearchGifsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchGifsRequestBuilder {
        private final String q;
        private Integer limit;
        private Integer offset;
        private String rating;
        private String lang;

        private SearchGifsRequestBuilder(String q) {
            this.q = q;
        }

        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 25)
         * @return SearchGifsRequestBuilder
         */
        public SearchGifsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An optional results offset. (optional, default to 0)
         * @return SearchGifsRequestBuilder
         */
        public SearchGifsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return SearchGifsRequestBuilder
         */
        public SearchGifsRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Set lang
         * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
         * @return SearchGifsRequestBuilder
         */
        public SearchGifsRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Build call for searchGifs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchGifsCall(q, limit, offset, rating, lang, _callback);
        }


        /**
         * Execute searchGifs request
         * @return GifsSearchGifsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsSearchGifsResponse execute() throws ApiException {
            ApiResponse<GifsSearchGifsResponse> localVarResp = searchGifsWithHttpInfo(q, limit, offset, rating, lang);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchGifs request with HTTP info returned
         * @return ApiResponse&lt;GifsSearchGifsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsSearchGifsResponse> executeWithHttpInfo() throws ApiException {
            return searchGifsWithHttpInfo(q, limit, offset, rating, lang);
        }

        /**
         * Execute searchGifs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsSearchGifsResponse> _callback) throws ApiException {
            return searchGifsAsync(q, limit, offset, rating, lang, _callback);
        }
    }

    /**
     * Search GIFs
     * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
     * @param q Search query term or prhase. (required)
     * @return SearchGifsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public SearchGifsRequestBuilder searchGifs(String q) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        return new SearchGifsRequestBuilder(q);
    }
    private okhttp3.Call translatePhraseGifCall(String s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifs/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translatePhraseGifValidateBeforeCall(String s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 's' is set
        if (s == null) {
            throw new ApiException("Missing the required parameter 's' when calling translatePhraseGif(Async)");
        }

        return translatePhraseGifCall(s, _callback);

    }


    private ApiResponse<GifsTranslatePhraseGifResponse> translatePhraseGifWithHttpInfo(String s) throws ApiException {
        okhttp3.Call localVarCall = translatePhraseGifValidateBeforeCall(s, null);
        Type localVarReturnType = new TypeToken<GifsTranslatePhraseGifResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call translatePhraseGifAsync(String s, final ApiCallback<GifsTranslatePhraseGifResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translatePhraseGifValidateBeforeCall(s, _callback);
        Type localVarReturnType = new TypeToken<GifsTranslatePhraseGifResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TranslatePhraseGifRequestBuilder {
        private final String s;

        private TranslatePhraseGifRequestBuilder(String s) {
            this.s = s;
        }

        /**
         * Build call for translatePhraseGif
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return translatePhraseGifCall(s, _callback);
        }


        /**
         * Execute translatePhraseGif request
         * @return GifsTranslatePhraseGifResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public GifsTranslatePhraseGifResponse execute() throws ApiException {
            ApiResponse<GifsTranslatePhraseGifResponse> localVarResp = translatePhraseGifWithHttpInfo(s);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute translatePhraseGif request with HTTP info returned
         * @return ApiResponse&lt;GifsTranslatePhraseGifResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GifsTranslatePhraseGifResponse> executeWithHttpInfo() throws ApiException {
            return translatePhraseGifWithHttpInfo(s);
        }

        /**
         * Execute translatePhraseGif request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GifsTranslatePhraseGifResponse> _callback) throws ApiException {
            return translatePhraseGifAsync(s, _callback);
        }
    }

    /**
     * Translate phrase to GIF
     * The translate API draws on search, but uses the GIPHY &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
     * @param s Search term. (required)
     * @return TranslatePhraseGifRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public TranslatePhraseGifRequestBuilder translatePhraseGif(String s) throws IllegalArgumentException {
        if (s == null) throw new IllegalArgumentException("\"s\" is required but got null");
            

        return new TranslatePhraseGifRequestBuilder(s);
    }
}
