/*
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.StickersFindAnimatedStickersResponse;
import com.konfigthis.client.model.StickersGetRandomResponse;
import com.konfigthis.client.model.StickersGetTrendingResponse;
import com.konfigthis.client.model.StickersTranslatePhraseToStickerResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StickersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StickersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StickersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"api_key\" is required but no API key was provided. Please set \"api_key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call findAnimatedStickersCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAnimatedStickersValidateBeforeCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling findAnimatedStickers(Async)");
        }

        return findAnimatedStickersCall(q, limit, offset, rating, lang, _callback);

    }


    private ApiResponse<StickersFindAnimatedStickersResponse> findAnimatedStickersWithHttpInfo(String q, Integer limit, Integer offset, String rating, String lang) throws ApiException {
        okhttp3.Call localVarCall = findAnimatedStickersValidateBeforeCall(q, limit, offset, rating, lang, null);
        Type localVarReturnType = new TypeToken<StickersFindAnimatedStickersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findAnimatedStickersAsync(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback<StickersFindAnimatedStickersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAnimatedStickersValidateBeforeCall(q, limit, offset, rating, lang, _callback);
        Type localVarReturnType = new TypeToken<StickersFindAnimatedStickersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindAnimatedStickersRequestBuilder {
        private final String q;
        private Integer limit;
        private Integer offset;
        private String rating;
        private String lang;

        private FindAnimatedStickersRequestBuilder(String q) {
            this.q = q;
        }

        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 25)
         * @return FindAnimatedStickersRequestBuilder
         */
        public FindAnimatedStickersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An optional results offset. (optional, default to 0)
         * @return FindAnimatedStickersRequestBuilder
         */
        public FindAnimatedStickersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return FindAnimatedStickersRequestBuilder
         */
        public FindAnimatedStickersRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Set lang
         * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
         * @return FindAnimatedStickersRequestBuilder
         */
        public FindAnimatedStickersRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Build call for findAnimatedStickers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findAnimatedStickersCall(q, limit, offset, rating, lang, _callback);
        }


        /**
         * Execute findAnimatedStickers request
         * @return StickersFindAnimatedStickersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public StickersFindAnimatedStickersResponse execute() throws ApiException {
            ApiResponse<StickersFindAnimatedStickersResponse> localVarResp = findAnimatedStickersWithHttpInfo(q, limit, offset, rating, lang);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findAnimatedStickers request with HTTP info returned
         * @return ApiResponse&lt;StickersFindAnimatedStickersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StickersFindAnimatedStickersResponse> executeWithHttpInfo() throws ApiException {
            return findAnimatedStickersWithHttpInfo(q, limit, offset, rating, lang);
        }

        /**
         * Execute findAnimatedStickers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StickersFindAnimatedStickersResponse> _callback) throws ApiException {
            return findAnimatedStickersAsync(q, limit, offset, rating, lang, _callback);
        }
    }

    /**
     * Search Stickers
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * @param q Search query term or prhase. (required)
     * @return FindAnimatedStickersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public FindAnimatedStickersRequestBuilder findAnimatedStickers(String q) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        return new FindAnimatedStickersRequestBuilder(q);
    }
    private okhttp3.Call getRandomCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomValidateBeforeCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        return getRandomCall(tag, rating, _callback);

    }


    private ApiResponse<StickersGetRandomResponse> getRandomWithHttpInfo(String tag, String rating) throws ApiException {
        okhttp3.Call localVarCall = getRandomValidateBeforeCall(tag, rating, null);
        Type localVarReturnType = new TypeToken<StickersGetRandomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRandomAsync(String tag, String rating, final ApiCallback<StickersGetRandomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomValidateBeforeCall(tag, rating, _callback);
        Type localVarReturnType = new TypeToken<StickersGetRandomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRandomRequestBuilder {
        private String tag;
        private String rating;

        private GetRandomRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filters results by specified tag. (optional)
         * @return GetRandomRequestBuilder
         */
        public GetRandomRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return GetRandomRequestBuilder
         */
        public GetRandomRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Build call for getRandom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRandomCall(tag, rating, _callback);
        }


        /**
         * Execute getRandom request
         * @return StickersGetRandomResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public StickersGetRandomResponse execute() throws ApiException {
            ApiResponse<StickersGetRandomResponse> localVarResp = getRandomWithHttpInfo(tag, rating);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRandom request with HTTP info returned
         * @return ApiResponse&lt;StickersGetRandomResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StickersGetRandomResponse> executeWithHttpInfo() throws ApiException {
            return getRandomWithHttpInfo(tag, rating);
        }

        /**
         * Execute getRandom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StickersGetRandomResponse> _callback) throws ApiException {
            return getRandomAsync(tag, rating, _callback);
        }
    }

    /**
     * Random Sticker
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @return GetRandomRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetRandomRequestBuilder getRandom() throws IllegalArgumentException {
        return new GetRandomRequestBuilder();
    }
    private okhttp3.Call getTrendingCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/trending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrendingValidateBeforeCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        return getTrendingCall(limit, offset, rating, _callback);

    }


    private ApiResponse<StickersGetTrendingResponse> getTrendingWithHttpInfo(Integer limit, Integer offset, String rating) throws ApiException {
        okhttp3.Call localVarCall = getTrendingValidateBeforeCall(limit, offset, rating, null);
        Type localVarReturnType = new TypeToken<StickersGetTrendingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrendingAsync(Integer limit, Integer offset, String rating, final ApiCallback<StickersGetTrendingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrendingValidateBeforeCall(limit, offset, rating, _callback);
        Type localVarReturnType = new TypeToken<StickersGetTrendingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrendingRequestBuilder {
        private Integer limit;
        private Integer offset;
        private String rating;

        private GetTrendingRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 25)
         * @return GetTrendingRequestBuilder
         */
        public GetTrendingRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset An optional results offset. (optional, default to 0)
         * @return GetTrendingRequestBuilder
         */
        public GetTrendingRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set rating
         * @param rating Filters results by specified rating. (optional)
         * @return GetTrendingRequestBuilder
         */
        public GetTrendingRequestBuilder rating(String rating) {
            this.rating = rating;
            return this;
        }
        
        /**
         * Build call for getTrending
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrendingCall(limit, offset, rating, _callback);
        }


        /**
         * Execute getTrending request
         * @return StickersGetTrendingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public StickersGetTrendingResponse execute() throws ApiException {
            ApiResponse<StickersGetTrendingResponse> localVarResp = getTrendingWithHttpInfo(limit, offset, rating);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrending request with HTTP info returned
         * @return ApiResponse&lt;StickersGetTrendingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StickersGetTrendingResponse> executeWithHttpInfo() throws ApiException {
            return getTrendingWithHttpInfo(limit, offset, rating);
        }

        /**
         * Execute getTrending request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StickersGetTrendingResponse> _callback) throws ApiException {
            return getTrendingAsync(limit, offset, rating, _callback);
        }
    }

    /**
     * Trending Stickers
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * @return GetTrendingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTrendingRequestBuilder getTrending() throws IllegalArgumentException {
        return new GetTrendingRequestBuilder();
    }
    private okhttp3.Call translatePhraseToStickerCall(String s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translatePhraseToStickerValidateBeforeCall(String s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 's' is set
        if (s == null) {
            throw new ApiException("Missing the required parameter 's' when calling translatePhraseToSticker(Async)");
        }

        return translatePhraseToStickerCall(s, _callback);

    }


    private ApiResponse<StickersTranslatePhraseToStickerResponse> translatePhraseToStickerWithHttpInfo(String s) throws ApiException {
        okhttp3.Call localVarCall = translatePhraseToStickerValidateBeforeCall(s, null);
        Type localVarReturnType = new TypeToken<StickersTranslatePhraseToStickerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call translatePhraseToStickerAsync(String s, final ApiCallback<StickersTranslatePhraseToStickerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = translatePhraseToStickerValidateBeforeCall(s, _callback);
        Type localVarReturnType = new TypeToken<StickersTranslatePhraseToStickerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TranslatePhraseToStickerRequestBuilder {
        private final String s;

        private TranslatePhraseToStickerRequestBuilder(String s) {
            this.s = s;
        }

        /**
         * Build call for translatePhraseToSticker
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return translatePhraseToStickerCall(s, _callback);
        }


        /**
         * Execute translatePhraseToSticker request
         * @return StickersTranslatePhraseToStickerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public StickersTranslatePhraseToStickerResponse execute() throws ApiException {
            ApiResponse<StickersTranslatePhraseToStickerResponse> localVarResp = translatePhraseToStickerWithHttpInfo(s);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute translatePhraseToSticker request with HTTP info returned
         * @return ApiResponse&lt;StickersTranslatePhraseToStickerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StickersTranslatePhraseToStickerResponse> executeWithHttpInfo() throws ApiException {
            return translatePhraseToStickerWithHttpInfo(s);
        }

        /**
         * Execute translatePhraseToSticker request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StickersTranslatePhraseToStickerResponse> _callback) throws ApiException {
            return translatePhraseToStickerAsync(s, _callback);
        }
    }

    /**
     * Translate phrase to Sticker
     * The translate API draws on search, but uses the GIPHY &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * @param s Search term. (required)
     * @return TranslatePhraseToStickerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public TranslatePhraseToStickerRequestBuilder translatePhraseToSticker(String s) throws IllegalArgumentException {
        if (s == null) throw new IllegalArgumentException("\"s\" is required but got null");
            

        return new TranslatePhraseToStickerRequestBuilder(s);
    }
}
